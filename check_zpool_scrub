#! /bin/sh

# MIT License
#
# Copyright (c) 2016 Josef Friedrich <josef@friedrich.rocks>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

PROJECT_PAGES='https://github.com/JosefFriedrich-shell/check_zpool_scrub
https://exchange.icinga.com/joseffriedrich/check_zpool_scrub
https://exchange.nagios.org/directory/Plugins/System-Metrics/File-System/check_zpool_scrub/details'

VERSION=1.0
FIRST_RELEASE=2016-09-08
SHORT_DESCRIPTION='Monitoring plugin to check how long ago the last ZFS scrub was performed.'
USAGE="check_zfs_scrub v$VERSION
Copyright (c) $(date +%Y --date=$FIRST_RELEASE)-$(date +%Y) Josef Friedrich <josef@friedrich.rocks>

$SHORT_DESCRIPTION


Usage: check_zfs_scrub <options>

Options:
  -c, --critical=INTERVAL_CRITICAL
    Interval in seconds for critical state.
  -p,--pool=POOL
    Name of the pool
  -h, --help
    Show this help.
  -s, --short-description
    Show a short description / summary.
  -w, --warning=INTERVAL_WARNING
    Interval in seconds for warning state. Must be lower than -c.

Performance data:
  - last_ago
      Time interval in seconds for last scrub.
  - warning
      Interval in seconds.
  - critical
      Interval in seconds.
  - progress
      Percent 0 - 100
  - speed
      MB per second
  - time
      Time to go in minutes
"

# Exit codes
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3

_last_scrub_date() {
	zpool history | \
		grep "zpool scrub $1" | \
		grep -v 'zpool scrub -s' | \
		tail -n 1 | \
		awk '{print $1}'
}

_date_to_timestamp() {
	date +%s --date="$(echo "$1" | tr '.' ' ')"
}

_get_last_scrub() {
	echo "$(_date_to_timestamp "$(_last_scrub_date "$1")")"
}

_performance_data() {
	echo "| \
last_ago=$DIFF \
warning=$INTERVAL_WARNING \
critical=$INTERVAL_CRITICAL \
progress=$PROGRESS \
speed=$SPEED \
time=$time"
}

_scrub_progress() {
	zpool status $1 | \
		grep -E -o '[[:digit:],]*%' | \
		sed 's/%//' | \
		tr ',' '.'
}

##
# Speed
##

_speed_grep() {
	zpool status "$1" | \
		grep -E -o '[[:digit:],]*[[:alpha:]]*/s'
}

_speed_normalize() {
	local SPEED UNIT
	SPEED=$(echo "$1" | sed 's#/s##' | tr , .)
	UNIT=$(echo -n "$SPEED" | tail -c  1)
	SPEED=$(echo "$SPEED" | sed 's/.$//' )

	if [ "$UNIT" = K ]; then
		SPEED="$(echo "$SPEED" | awk '{MB = $1 / 1024 ; print MB}')"
	fi
	echo $SPEED
}

_speed() {
	local SPEED
	SPEED="$(_speed_grep "$1")"
	if [ -n "$SPEED" ]; then
		_speed_normalize "$SPEED"
	else
		echo 0
	fi
}

##
# time to go
##

_time_grep() {
	zpool status "$1" | \
		grep -P -o '(?<=, )[[:digit:]]*h[[:digit:]]*m(?= to go)'
}

_time_to_min() {
	local HOURS MIN
	HOURS=$(echo "$1" | sed 's/h.*//')
	MIN=$(echo "$1" | sed 's/.*h//' | sed 's/m//')
	echo $((HOURS * 60 + MIN))
}

_time() {
	local GREP
	GREP="$(_time_grep "$1")"
	if [ -n "$GREP" ]; then
		_time_to_min "$GREP"
	else
		echo 0
	fi
}

_getopts() {
	while getopts ':c:hp:sw:-:' OPT ; do
		case $OPT in
			c)
				INTERVAL_CRITICAL=$OPTARG
				;;

			h)
				echo "$USAGE"
				exit 0
				;;

			p)
				POOL="$OPTARG"
				;;

			s)
				echo "$SHORT_DESCRIPTION"
				;;

			w)
				INTERVAL_WARNING=$OPTARG
				;;

			\?)
				echo "Invalid option “-$OPTARG”!" >&2
				exit 2
				;;

			:)
				echo "Option “-$OPTARG” requires an argument!" >&2
				exit 3
				;;

			-)
				LONG_OPTARG="${OPTARG#*=}"

				case $OPTARG in

					critical=?*)
						INTERVAL_CRITICAL=$LONG_OPTARG
						;;

					help)
						echo "$USAGE"
						exit 0
						;;

					pool=?*)
						POOL="$LONG_OPTARG"
						;;

					short-description)
						echo "$SHORT_DESCRIPTION"
						exit 0
						;;

					warning=?*)
						INTERVAL_WARNING=$LONG_OPTARG
						;;

					help*|short-description*)
						echo "No argument allowed for the option “--$OPTARG”!" >&2
						exit 4
						;;

					critical*|pool*|warning*)
						echo "Option “--$OPTARG” requires an argument!" >&2
						exit 3
						;;

					'')	# "--" terminates argument processing
						break
						;;

					*)
						echo "Invalid option “--$OPTARG”!" >&2
						exit 2
						;;

				esac
				;;

		esac
	done
}

## This SEPARATOR is required for test purposes. Please don’t remove! ##

_getopts $@

if [ -z "$INTERVAL_WARNING" ]; then
	# 1 month 60*60*24*31
	INTERVAL_WARNING=2678400
fi

if [ -z "$INTERVAL_CRITICAL" ]; then
	# 2 month 60*60*24*31*2
	INTERVAL_CRITICAL=5356800
fi

if ! zpool status "$POOL" > /dev/null 2>&1; then
	echo "“$POOL” is no ZFS pool!" >&2
	echo "$USAGE" >&2
	exit $STATE_UNKNOWN
fi

NOW=$(date +%s)
LAST_SCRUB=$(_get_last_scrub "$POOL")
DIFF=$((NOW - LAST_SCRUB))

if [ "$INTERVAL_WARNING" -gt "$INTERVAL_CRITICAL" ]; then
	echo '<warntime> must be smaller than <crittime>' >&2
	_usage  >&2
	exit $STATE_UNKNOWN
fi

PROGRESS=$(_scrub_progress "$POOL")
SPEED="$(_speed "$POOL")"
time="$(_time "$POOL")"

RETURN=STATE_UNKNOWN

if [ "$DIFF" -gt "$INTERVAL_CRITICAL" ]; then
	RETURN=$STATE_CRITICAL
	MESSAGE="CRITICAL:"
elif [ "$DIFF" -gt "$INTERVAL_WARNING" ]; then
	RETURN=$STATE_WARNING
	MESSAGE="WARNING:"
else
	RETURN=$STATE_OK
	MESSAGE="OK:"
fi

DATE=$(date +%Y-%m-%dT%H:%M:%SZ --date @$LAST_SCRUB)

echo "$MESSAGE The last scrub on zpool “${POOL}” was performed on $DATE $(_performance_data)"

exit $RETURN
